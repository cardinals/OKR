<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	   default-autowire="byName" default-lazy-init="false">


	<!-- 修改添加 com.css.*.dao, com.css.*.service -->
    <context:component-scan base-package="com.pe.*.dao,com.pe.*.service, com.pe.controller,com.equTest.dao,com.equTest.service,com.equTest.controller" />
	

	<!-- 国际化资源 -->
	<!-- <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource" scope="prototype">
		<property name="basenames">
			<list>
				<value>classpath:resource/errors</value>
				<value>classpath:resource/form</value>
				<value>classpath:resource/message</value>
			</list>
        </property>
        <property name="useCodeAsDefaultMessage" value="true"/>
        <property name="cacheSeconds" value="0"></property>
        <property name="defaultEncoding" value="UTF-8"></property>
    </bean>  -->
    
    
    <!--加载配置文件-->
	<bean id="configproperties" 
         class="org.springframework.beans.factory.config.PropertiesFactoryBean">
          <property name="location" value="classpath:/conf/app.properties"/>
    </bean>
     <bean id="propertyConfigurer"  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
         <property name="properties" ref="configproperties"/>
    </bean>
	
	<!--jdbcTemplate-->
	<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean> -->
    
    
    <!--专门用来产生ID-->
    <bean id="jdbcTemplateSN" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
   
   
   	<bean id="sqlSessionFactory" class="com.pe.core.mybatis.SqlSessionFactoryFactoryBean">
        <property name="configLocation" value="classpath:/conf/configuration.xml"/>
        <property name="mapperLocations" >
        	<list>
        		<value>classpath:/com/pe/*/maper/*.map.xml</value>
        	</list>
        </property>
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
	 
	 <!--修改时间：2013-4-19； 修改人：鲁坤 ；修改内容：将log4jdbcInterceptor和dataSourceLog4jdbcAutoProxyCreator两个注释去掉，平台中打开调试 -->
	<!-- <bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />
	<bean id="dataSourceLog4jdbcAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>
				<value>log4jdbcInterceptor</value>
			</list>
		</property>
		<property name="beanNames">
			<list>
				<value>dataSource</value>
			</list>
		</property>
	</bean>
	
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="logAspect" class="com.hotent.core.aop.LogAspect"/>  
	 
	-->
	
	
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.pe.platform.service..*.*(..))"  />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		  	<tx:method name="get*" read-only="true"/>
			<tx:method name="is*" read-only="true"/>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="*" isolation="DEFAULT"/>
		</tx:attributes>
	</tx:advice> 
	
	
	<!-- 文件模版引擎配置 -->
	<bean id="freemarkerConfiguration" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
	    <property name="templateLoaderPath" value="classpath:template/" />
	    <property name="defaultEncoding" value="UTF-8"/>
	</bean>
	
	<!-- 字符串模版引擎配置。  -->
	<bean id="freemarkerConfigurationString" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
	 	<property name="preTemplateLoaders" >
	 		<list>
	 			<ref bean="templateLoader"/>
	 		</list>
	 	</property>
	    <property name="defaultEncoding" value="UTF-8"/>
	</bean>
	
	<bean id="templateLoader" class="freemarker.cache.StringTemplateLoader"></bean>
	
	<!-- freemaker引擎 -->
	<bean id="freemarkEngine" class="com.pe.core.engine.FreemarkEngine">
		<property name="configuration" ref="freemarkerConfiguration"/>
		
	</bean>
	
	<!--发送邮件配置-->
	<!-- <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.host}" />
		<property name="username" value="${mail.username}" />
		<property name="password" value="${mail.password}" />
		<property name="defaultEncoding" value="${mail.defaultEncoding}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
			</props>
		</property>
	</bean> -->
	
	<!-- QUARTZ 2.0配置的问题 -->
	<!-- <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
		lazy-init="false" destroy-method="destroy">
		<property name="autoStartup" value="false" />
		<property name="waitForJobsToCompleteOnShutdown" value="false" />
		<property name="dataSource" ref="dataSource" />
		<property name="overwriteExistingJobs" value="true" />
		<property name="startupDelay" value="60"></property>
		<property name="jobFactory">  
            <bean class="org.quartz.simpl.SimpleJobFactory"></bean>  
        </property>  
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.jobStore.driverDelegateClass">${quartz.jdbcjobstore}</prop>
				<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
				<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
				
				<prop key="org.quartz.jobStore.clusterCheckinInterval">20000</prop>
				<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
				<prop key="org.quartz.scheduler.classLoadHelper.class">org.quartz.simpl.CascadingClassLoadHelper</prop> 
				<prop key="org.quartz.jobStore.lockHandler.class">org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore</prop> 
				<prop key="org.quartz.jobStore.lockHandler.updateLockRowSQL">UPDATE QRTZ_LOCKS SET LOCK_NAME = LOCK_NAME WHERE LOCK_NAME = ?</prop>

			</props>
		</property>
	</bean> -->
	

	<!-- activity directory 活动目录配置-->
	<!-- <context:component-scan base-package="com.hotent.core.ldap.dao.impl" />
	<bean id="ldapSource" class="org.springframework.ldap.core.support.LdapContextSource">
		<property name="url" value="${ldapUrl}" />
		<property name="base" value="${ldapBase}" />
		<property name="userDn" value="${ldapUserDn}" />
		<property name="password" value="${ldapPassword}" />
		<property name="pooled" value="${ldapPooled}"></property>
	</bean>
	<bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
		<property name="ContextSource" ref="ldapSource"></property>
		<property name="ignorePartialResultException" value="true"/>
	</bean> -->
</beans>